/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Doctor;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.OrganDonationEnterprise;
import Business.Hospital.Doctor;
import Business.OrganDonation.Organ;
import Business.Organization.DoctorOrganization;
import Business.Organization.OrganDonationInventoryManagerOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
//import Business.Hospital.HospitalInventoryManager;
//import Business.Organization.HospInventoryManagerOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrganDonationWQ;
import Business.WorkQueue.WorkRequest;
import java.awt.Color;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author JAGTAP
 */
public class DoctorOrganRequest extends javax.swing.JPanel {

    /**
     * Creates new form DoctorOrganRequest
     */
    JPanel userProcessContainer;
    UserAccount account; 
    DoctorOrganization organization; 
    Enterprise enterprise; 
    EcoSystem business;
    Doctor d;
    public DoctorOrganRequest(JPanel userProcessContainer, UserAccount account, DoctorOrganization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.account=account;
        this.business=business;
        this.organization= organization;
        d= (Doctor) account.getEmployee().getP();
        populateworkrequestable();
        populateCombox();
        
    }

    public void populateCombox()
    {
        comboVaccine.removeAllItems();
        comboVaccine.addItem("Heart");
        comboVaccine.addItem("Kidney");
        comboVaccine.addItem("Eyes");
        comboVaccine.addItem("Liver");
        reqPatientComboBox.removeAllItems();
        for(Patient p : business.getPatientDirectory().getListOfPatient())
        {
            reqPatientComboBox.addItem(p.getID());
        }
    }
    public void populateworkrequestable()
    {
        //populate workrequest
        DefaultTableModel dtm1 = (DefaultTableModel) requestTable.getModel();
        dtm1.setRowCount(0);
        for(WorkRequest work : account.getWorkQueue().getWorkRequestList())
        {
            if((work instanceof OrganDonationWQ) && (!work.getStatus().equals("Received")))
            {
                OrganDonationWQ ldwq = (OrganDonationWQ) work;
                    Object [] row = new Object[4];
                    row[0] = ldwq.getOrgan().getPatientId();
                    row[1] = ldwq.getOrgan().getName();
                    row[2] = ldwq;
                    UserAccount result = ldwq.getReceiver();
                    row[3] = result == null ? "Waiting" : result;
                    dtm1.addRow(row);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        requestTable = new javax.swing.JTable(){
            public Component prepareRenderer(TableCellRenderer renderer, int row, int col) {
                Component c = super.prepareRenderer(renderer, row, col);
                OrganDonationWQ p = (OrganDonationWQ) getValueAt(row, 2);
                if ("Complete".equals(p.getStatus())) {
                    c.setBackground(Color.RED);
                    c.setForeground(Color.BLACK);
                } else {
                    c.setBackground(super.getBackground());
                    c.setForeground(super.getForeground());
                }
                return c;
            }
        };
        reqPatientComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        reqTestButton = new javax.swing.JButton();
        delButton = new javax.swing.JButton();
        doneButton = new javax.swing.JButton();
        comboVaccine = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        requestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ForPatientId", "Organ", "Status", "Receiver"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(requestTable);

        reqPatientComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("PatientId");

        reqTestButton.setText("Request Organ");
        reqTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqTestButtonActionPerformed(evt);
            }
        });

        delButton.setText("Delete Request");
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });

        doneButton.setText("Received");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Organ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(doneButton)
                        .addGap(84, 84, 84)
                        .addComponent(delButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(27, 27, 27)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(reqPatientComboBox, 0, 151, Short.MAX_VALUE)
                                .addComponent(comboVaccine, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(reqTestButton))))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reqPatientComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(reqTestButton))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboVaccine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doneButton)
                    .addComponent(delButton))
                .addContainerGap(192, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reqTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqTestButtonActionPerformed
        // TODO add your handling code here:
        if(reqPatientComboBox.getSelectedItem()==null || comboVaccine.getSelectedItem()==null)
            JOptionPane.showMessageDialog(null, "Please select the patient id and organ for making request", "Error", 0);
        else
        {
            OrganDonationWQ lab4DocWQ = new OrganDonationWQ();
            Organ mt = new Organ();
            mt.setName(String.valueOf(comboVaccine.getSelectedItem()));
            mt.setPatientId(String.valueOf(reqPatientComboBox.getSelectedItem()));
            lab4DocWQ.setOrgan(mt);
            lab4DocWQ.setSender(account);
            lab4DocWQ.setStatus("Requested");
            Organization org = null;
            Enterprise ent = null;
            for (Enterprise e1 : enterprise.getNetwork().getEnterpriseDirectory().getEnterpriseList()){
                if (e1 instanceof OrganDonationEnterprise){
                    ent = e1;
                    for(Organization o1: ent.getOrganizationDirectory().getOrganizationList())
                    {
                        if(o1 instanceof OrganDonationInventoryManagerOrganization)
                        {
                            org = o1;
                            break;
                        }
                    }
                    break;
                }
            }
            if (org!=null){
                org.getWorkQueue().getWorkRequestList().add(lab4DocWQ);
                account.getWorkQueue().getWorkRequestList().add(lab4DocWQ);
            }
            populateworkrequestable();

        }
    }//GEN-LAST:event_reqTestButtonActionPerformed

    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow= requestTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select the row to delete the account", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{

            WorkRequest p=(WorkRequest) requestTable.getValueAt(selectedRow, 2);

            // s.getWorkQueue().getWorkRequestList().remove(p);
            organization.getWorkQueue().getWorkRequestList().remove(p);
            account.getWorkQueue().getWorkRequestList().remove(p);
            //business.getWorkQueue().getWorkRequestList().remove(p);
            //him.getWorkQueue().getWorkRequestList().remove(p);
            JOptionPane.showMessageDialog(null, "You have successfully deleted the test request");
            populateworkrequestable();
        }
    }//GEN-LAST:event_delButtonActionPerformed

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestTable.getSelectedRow();
        if (selectedRow < 0)
        {
            JOptionPane.showMessageDialog(null, "Please select a row ", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else
        {

            OrganDonationWQ ldwq = (OrganDonationWQ) requestTable.getValueAt(selectedRow, 2);
            if(ldwq.getStatus().equals("Complete"))
            {
                //Organ mt = ldwq.getOrgan();
                //patient.getListOfMedicalTests().add(mt);
                ldwq.setStatus("Received");
            }
            else
            JOptionPane.showMessageDialog(null, "The request must be completed ", "Warning", 2);
            populateworkrequestable();
            //populateMedicalTest();
        }

    }//GEN-LAST:event_doneButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboVaccine;
    private javax.swing.JButton delButton;
    private javax.swing.JButton doneButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> reqPatientComboBox;
    private javax.swing.JButton reqTestButton;
    private javax.swing.JTable requestTable;
    // End of variables declaration//GEN-END:variables
}
